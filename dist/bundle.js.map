{"version":3,"file":"bundle.js","mappings":";;;;;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,uBAAuB,gBAAgB;AACvC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,uBAAuB,cAAc;AACrC;AACA;;AAEA,2BAA2B;AAC3B,2BAA2B;;AAE3B;AACA;AACA;;AAEA;AACA,sCAAsC,OAAO;AAC7C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iCAAiC,WAAW,EAAE,UAAU;AACxD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,uBAAuB,oBAAoB;AAC3C;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://cart-game/./src/index.js"],"sourcesContent":["// const suits = ['черви', 'бубны', 'крести', 'пики'];\n// const ranks = ['6', '7', '8', '9', '10', 'Q', 'K', 'J', 'A'];\n\n// const levels = {\n//     easy: 6,\n//     medium: 12,\n//     hard: 18,\n// };\n\n// let selectedLevel = null;\n// let level = 'easy';\n// let cards = [];\n\n// function startGame() {\n//     const gameBoard = document.getElementById('game-board');\n//     gameBoard.innerHTML = '';\n\n//     // Cоздание карточек\n//     for (let i = 0; i < totalCards; i++) {\n//         const cardElement = document.createElement('div');\n//         cardElement.className = 'card';\n//         cardElement.dataset.image = cardImages[i];\n//         cardElement.addEventListener('click', handleCardClick);\n//         gameBoard.appendChild(cardElement);\n//     }\n\n//     cards = document.querySelectorAll('.card');\n// }\n\n// // Функция для генерации карточек\n// function generateCards(level) {\n//     const numPairs = levels[level] / 2;\n//     cards = [];\n\n//     // Генерация карточек\n//     for (let i = 0; i < numPairs; i++) {\n//         const suit = suits[Math.floor(Math.random() * suits.length)];\n//         const rank = ranks[Math.floor(Math.random() * ranks.length)];\n\n//         const card1 = { suit, rank };\n//         const card2 = { suit, rank };\n\n//         cards.push(card1);\n//         cards.push(card2);\n//     }\n\n//     // Перетасовка карточек\n//     for (let i = cards.length - 1; i > 0; i--) {\n//         const j = Math.floor(Math.random() * (i + 1));\n//         [cards[i], cards[j]] = [cards[j], cards[i]];\n//     }\n// }\n\n// // Функция для показа карт игроку\n// async function showCards() {\n//     for (let card of cards) {\n//         console.log(`Карта: ${card.suit} ${card.rank}`);\n//         await new Promise((resolve) => setTimeout(resolve, 5000));\n//     }\n// }\n\n// // Функция для переворота карт рубашкой вверх\n// function flipCards() {\n//     for (let card of cards) {\n//         card.face = 'рубашка';\n//     }\n// }\n// // Функция для отображения результатов игры\n// function showResults(message) {\n//     alert(message);\n// }\n// // Функция для предложения сыграть снова\n// function playAgain() {\n//     const response = confirm('Хотите сыграть снова?');\n//     if (response) {\n//         // Генерация новых карт и начало игры заново\n//         generateCards(level);\n//         showCards();\n//         flipCards();\n//     } else {\n//         // Игра завершена\n//         console.log('Игра завершена!');\n//     }\n// }\n\n// // Функция для обработки клика на карточку\n// function handleClick(cardIndex) {\n//     const card = cards[cardIndex];\n//     card.face = 'лицо';\n\n//     // Проверка на совпадение пары\n//     const flippedCards = cards.filter((card) => card.face === 'лицо');\n//     if (\n//         flippedCards.length === 2 &&\n//         flippedCards[0].rank === flippedCards[1].rank &&\n//         flippedCards[0].suit === flippedCards[1].suit\n//     ) {\n//         // Если пара совпала, продолжаем игру\n//         showResults('Пара совпала!');\n//     } else if (flippedCards.length === 2) {\n//         // Если пара не совпала, игра заканчивается\n//         showResults('Игра окончена!');\n//         playAgain();\n//     }\n\n//     // Проверка на завершение игры\n//     const matchedCards = cards.filter((card) => card.face === 'лицо');\n//     if (matchedCards.length === cards.length) {\n//         // Игрок победил\n//         showResults('Вы победили!');\n//         playAgain();\n//     }\n// }\n\n// function generateCardImages(totalCards) {\n//     const images = [\n//         'image1.jpg',\n//         'image2.jpg',\n//         'image3.jpg',\n//         'image4.jpg',\n//         'image5.jpg',\n//         'image6.jpg',\n//         'image7.jpg',\n//         'image8.jpg',\n//         'image9.jpg',\n//     ];\n\n//     let cardImages = [];\n\n//     for (let i = 0; i < totalCards / 2; i++) {\n//         const image = images[i];\n//         cardImages.push(image, image);\n//     }\n\n//     return cardImages;\n// }\n\n// // Генерация карт для выбранного уровня сложности\n// generateCards(level);\n\n// // Показ карт игроку на 5 секунд\n// showCards();\n\n// // Переворот карт рубашкой вверх\n// flipCards();\n\n// // Обработка клика на карточку (пример)\n// handleClick(0);\n\nlet selectedLevel = null;\n\nfunction startGame() {\n    localStorage.setItem('level', selectedLevel);\n    window.location = '/game.html';\n}\n\ndocument.getElementById('start').addEventListener('click', startGame);\n\nfunction selectLevel(level) {\n    selectedLevel = level;\n}\n\ndocument\n    .getElementById('easy')\n    .addEventListener('click', () => selectLevel('easy'));\ndocument\n    .getElementById('medium')\n    .addEventListener('click', () => selectLevel('medium'));\ndocument\n    .getElementById('hard')\n    .addEventListener('click', () => selectLevel('hard'));\n"],"names":[],"sourceRoot":""}